// protoc --go_out=.  --go-grpc_out=. *.proto

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.17.3
// source: api.proto

package api

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Greeter_GetConfig_FullMethodName = "/Configmgr.Greeter/GetConfig"
	Greeter_SetConfig_FullMethodName = "/Configmgr.Greeter/SetConfig"
	Greeter_DelConfig_FullMethodName = "/Configmgr.Greeter/DelConfig"
	Greeter_Watch_FullMethodName     = "/Configmgr.Greeter/Watch"
)

// GreeterClient is the client API for Greeter service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type GreeterClient interface {
	GetConfig(ctx context.Context, in *GetConfigReq, opts ...grpc.CallOption) (*GetConfigRes, error)
	SetConfig(ctx context.Context, in *SetConfigReq, opts ...grpc.CallOption) (*SetConfigRes, error)
	DelConfig(ctx context.Context, in *DelConfigReq, opts ...grpc.CallOption) (*DelConfigRes, error)
	Watch(ctx context.Context, in *WatchReq, opts ...grpc.CallOption) (Greeter_WatchClient, error)
}

type greeterClient struct {
	cc grpc.ClientConnInterface
}

func NewGreeterClient(cc grpc.ClientConnInterface) GreeterClient {
	return &greeterClient{cc}
}

func (c *greeterClient) GetConfig(ctx context.Context, in *GetConfigReq, opts ...grpc.CallOption) (*GetConfigRes, error) {
	out := new(GetConfigRes)
	err := c.cc.Invoke(ctx, Greeter_GetConfig_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *greeterClient) SetConfig(ctx context.Context, in *SetConfigReq, opts ...grpc.CallOption) (*SetConfigRes, error) {
	out := new(SetConfigRes)
	err := c.cc.Invoke(ctx, Greeter_SetConfig_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *greeterClient) DelConfig(ctx context.Context, in *DelConfigReq, opts ...grpc.CallOption) (*DelConfigRes, error) {
	out := new(DelConfigRes)
	err := c.cc.Invoke(ctx, Greeter_DelConfig_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *greeterClient) Watch(ctx context.Context, in *WatchReq, opts ...grpc.CallOption) (Greeter_WatchClient, error) {
	stream, err := c.cc.NewStream(ctx, &Greeter_ServiceDesc.Streams[0], Greeter_Watch_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &greeterWatchClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Greeter_WatchClient interface {
	Recv() (*WatchRes, error)
	grpc.ClientStream
}

type greeterWatchClient struct {
	grpc.ClientStream
}

func (x *greeterWatchClient) Recv() (*WatchRes, error) {
	m := new(WatchRes)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// GreeterServer is the server API for Greeter service.
// All implementations must embed UnimplementedGreeterServer
// for forward compatibility
type GreeterServer interface {
	GetConfig(context.Context, *GetConfigReq) (*GetConfigRes, error)
	SetConfig(context.Context, *SetConfigReq) (*SetConfigRes, error)
	DelConfig(context.Context, *DelConfigReq) (*DelConfigRes, error)
	Watch(*WatchReq, Greeter_WatchServer) error
	mustEmbedUnimplementedGreeterServer()
}

// UnimplementedGreeterServer must be embedded to have forward compatible implementations.
type UnimplementedGreeterServer struct {
}

func (UnimplementedGreeterServer) GetConfig(context.Context, *GetConfigReq) (*GetConfigRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetConfig not implemented")
}
func (UnimplementedGreeterServer) SetConfig(context.Context, *SetConfigReq) (*SetConfigRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetConfig not implemented")
}
func (UnimplementedGreeterServer) DelConfig(context.Context, *DelConfigReq) (*DelConfigRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DelConfig not implemented")
}
func (UnimplementedGreeterServer) Watch(*WatchReq, Greeter_WatchServer) error {
	return status.Errorf(codes.Unimplemented, "method Watch not implemented")
}
func (UnimplementedGreeterServer) mustEmbedUnimplementedGreeterServer() {}

// UnsafeGreeterServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GreeterServer will
// result in compilation errors.
type UnsafeGreeterServer interface {
	mustEmbedUnimplementedGreeterServer()
}

func RegisterGreeterServer(s grpc.ServiceRegistrar, srv GreeterServer) {
	s.RegisterService(&Greeter_ServiceDesc, srv)
}

func _Greeter_GetConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetConfigReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GreeterServer).GetConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Greeter_GetConfig_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GreeterServer).GetConfig(ctx, req.(*GetConfigReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Greeter_SetConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetConfigReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GreeterServer).SetConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Greeter_SetConfig_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GreeterServer).SetConfig(ctx, req.(*SetConfigReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Greeter_DelConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DelConfigReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GreeterServer).DelConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Greeter_DelConfig_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GreeterServer).DelConfig(ctx, req.(*DelConfigReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Greeter_Watch_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(WatchReq)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(GreeterServer).Watch(m, &greeterWatchServer{stream})
}

type Greeter_WatchServer interface {
	Send(*WatchRes) error
	grpc.ServerStream
}

type greeterWatchServer struct {
	grpc.ServerStream
}

func (x *greeterWatchServer) Send(m *WatchRes) error {
	return x.ServerStream.SendMsg(m)
}

// Greeter_ServiceDesc is the grpc.ServiceDesc for Greeter service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Greeter_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "Configmgr.Greeter",
	HandlerType: (*GreeterServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetConfig",
			Handler:    _Greeter_GetConfig_Handler,
		},
		{
			MethodName: "SetConfig",
			Handler:    _Greeter_SetConfig_Handler,
		},
		{
			MethodName: "DelConfig",
			Handler:    _Greeter_DelConfig_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Watch",
			Handler:       _Greeter_Watch_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "api.proto",
}
